#+title: Linux-Stuff

* Standby / Ruhemodus / Suspend

Der Suspend-Modus unter Ubuntu 18.04. mit Dell XPS 13 ist teilweise sehr
batteriehungrig.

#+begin_src bash
cat /sys/power/mem_sleep
#+end_src

sollte ~s2idle [deep]~ zurückgeben, um in einen batteriefreundlicheren Ruhemodus
zu gehen. Falls nicht, führe als superuser (=sudo su=) aus:

#+begin_src bash
echo deep > /sys/power/mem_sleep
#+end_src

** Test auf Funktionalität

Zum Überprüfen nach Suspend-Vorgang:

#+begin_src bash
sudo journalctl | grep "PM: suspend" | tail -2
#+end_src

Dort sollte dann ~deep~ stehen und nicht ~s2idle~.

* Lüftersteuerung
** Sensors
Installiere Paket ~sensors~. Dann mit =sensors= Übersicht über Temperaturen und
Lüftergeschwindigkeiten. Via =watch sensors= alle zwei Sekunden aktualisiert
angezeigt bekommen.

** i8k
Anleitung von https://forum.manjaro.org/t/fancontrol-i8kutils-service-doesnt-start-at-boot/81559
#+begin_src bash
sudo dell-bios-fan-control 0
sudo modprobe i8k force=1
systemctl enable i8kmon
systemctl start i8kmon
#+end_src

Das obige auch ausführen (modprobe...) falls mal irgendwie =i8kfan= / =i8kmon= /
=i8kctl= nicht ausgeführt werden kann.

*** i8k Benutzung
https://medium.com/@kasunsiyambalapitiya/fixing-constantly-running-fans-on-dell-laptops-running-ubuntu-16-04-8cf6595381d9

U. a. Datei anlegen =/etc/i8kmon.conf= mit Inhalt:

#+begin_src bash
# Sample i8kmon configuration file (/etc/i8kmon.conf, ~/.i8kmon).
# External program to control the fans
set config(i8kfan)  /usr/bin/i8kfan
# Run as daemon, override with --daemon option
set config(daemon) 0
# Automatic fan control, override with --auto option
set config(auto) 1
set config(nouserconfig) 1
# Applet geometry, override with --geometry option
set config(geometry)    {48x48}
# Report status on stdout, override with --verbose option
set config(verbose) 1
# Status check timeout (seconds), override with --timeout option
set config(timeout) 5
# Temperature display unit (C/F), override with --unit option
set config(unit)    C
# Temperature threshold at which the temperature is displayed in red
set config(t_high)  80
# Temperature thresholds: {fan_speeds low_ac high_ac low_batt high_batt}
# These were tested on the I8000. If you have a different Dell laptop model
# you should check the BIOS temperature monitoring and set the appropriate
# thresholds here. In doubt start with low values and gradually rise them
# until the fans are not always on when the cpu is idle.
set config(0) {{-1 0} -1 60 -1 65}
set config(1) {{-1 1} 50 70 55 75}
set config(2) {{-1 1} 60 80 65 85}
set config(3) {{-1 2} 70 128 75 128}
# end of file
#+end_src

unten stehen die Fan-Thresholds

** dell-bios-fan-control

i8k wird leider von den Bios-Einstellungen überschrieben, deshalb explizit Bios
abschalten mit dem Tool =dell-bios-fan-control=. Siehe dieses Github-Issue
https://github.com/vitorafsr/i8kutils/issues/13

Das herunterladen

https://github.com/TomFreudenberg/dell-bios-fan-control

und =make= ausführen. Dann kann via

#+begin_src bash
> dell-bios-fan-control 0
#+end_src

das Bios deaktiviert werden (und mit =1= aktiviert). Dann funktioniert i8k. Testen
mit

#+begin_src bash
> i8kfan 1 1
#+end_src

Sollte Lüfter anschalten können.

*Hinweis*: Das bricht Stand jetzt die den Suspen-Modus "deep": Er geht zwar in
deep-Sleep, wacht aber nicht mehr davon auf und muss neugestartet werden.

** dell-smm-hwmon ?
Weiß nicht ob das noch benötigt ist, oder nur obiges mit dell-bios-fan-control.

Gefunden auf https://bugs.launchpad.net/i8kutils/+bug/410596

> Add "dell-smm-hwmon" to /etc/modules and verify you have "options
> dell-smm-hwmon restricted=0" in /etc/modprobe.d/dell-smm-hwmon.conf

Stand jetzt ist: in =/etc/modules= steht bei mir

#+begin_src bash
# /etc/modules: kernel modules to load at boot time.
#
# This file contains the names of kernel modules that should be loaded
# at boot time, one per line. Lines beginning with "#" are ignored.
dell-smm-hwmon
i8k
#+end_src

Und in =/etc/modprobe.d/dell-smm-hwmon.conf=

#+begin_src bash
# This file must be at /etc/modprobe.d/
options dell-smm-hwmon restricted=0 ignore_dmi=1
#+end_src

* Save Session
Vielleicht klappt das:

Installiere =dconf-editor=, dort dann navigieren zu

  org -> gnome -> gnome-session -> auto-save-session

und den Wert auf =true= setzen

* Emacs Keybindings
  Tweaks -> Keyboard & Mouse -> Emacs Input

* Konsolen Tools
** z jump around
 Skrip, um fuzzy search auf der Konsole zu machen und dorthin zu cd'en
 #+begin_src bash
 # Copyright (c) 2009 rupa deadwyler. Licensed under the WTFPL license, Version 2

 # maintains a jump-list of the directories you actually use
 #
 # INSTALL:
 #     * put something like this in your .bashrc/.zshrc:
 #         . /path/to/z.sh
 #     * cd around for a while to build up the db
 #     * PROFIT!!
 #     * optionally:
 #         set $_Z_CMD in .bashrc/.zshrc to change the command (default z).
 #         set $_Z_DATA in .bashrc/.zshrc to change the datafile (default ~/.z).
 #         set $_Z_MAX_SCORE lower to age entries out faster (default 9000).
 #         set $_Z_NO_RESOLVE_SYMLINKS to prevent symlink resolution.
 #         set $_Z_NO_PROMPT_COMMAND if you're handling PROMPT_COMMAND yourself.
 #         set $_Z_EXCLUDE_DIRS to an array of directories to exclude.
 #         set $_Z_OWNER to your username if you want use z while sudo with $HOME kept
 #
 # USE:
 #     * z foo     # cd to most frecent dir matching foo
 #     * z foo bar # cd to most frecent dir matching foo and bar
 #     * z -r foo  # cd to highest ranked dir matching foo
 #     * z -t foo  # cd to most recently accessed dir matching foo
 #     * z -l foo  # list matches instead of cd
 #     * z -e foo  # echo the best match, don't cd
 #     * z -c foo  # restrict matches to subdirs of $PWD
 #     * z -x      # remove the current directory from the datafile
 #     * z -h      # show a brief help message

 [ -d "${_Z_DATA:-$HOME/.z}" ] && {
     echo "ERROR: z.sh's datafile (${_Z_DATA:-$HOME/.z}) is a directory."
 }

 _z() {

     local datafile="${_Z_DATA:-$HOME/.z}"

     # if symlink, dereference
     [ -h "$datafile" ] && datafile=$(readlink "$datafile")

     # bail if we don't own ~/.z and $_Z_OWNER not set
     [ -z "$_Z_OWNER" -a -f "$datafile" -a ! -O "$datafile" ] && return

     _z_dirs () {
         local line
         while read line; do
             # only count directories
             [ -d "${line%%\|*}" ] && echo "$line"
         done < "$datafile"
         return 0
     }

     # add entries
     if [ "$1" = "--add" ]; then
         shift

         # $HOME isn't worth matching
         [ "$*" = "$HOME" ] && return

         # don't track excluded directory trees
         local exclude
         for exclude in "${_Z_EXCLUDE_DIRS[@]}"; do
             case "$*" in "$exclude*") return;; esac
         done

         # maintain the data file
         local tempfile="$datafile.$RANDOM"
         local score=${_Z_MAX_SCORE:-9000}
         _z_dirs | awk -v path="$*" -v now="$(date +%s)" -v score=$score -F"|" '
             BEGIN {
                 rank[path] = 1
                 time[path] = now
             }
             $2 >= 1 {
                 # drop ranks below 1
                 if( $1 == path ) {
                     rank[$1] = $2 + 1
                     time[$1] = now
                 } else {
                     rank[$1] = $2
                     time[$1] = $3
                 }
                 count += $2
             }
             END {
                 if( count > score ) {
                     # aging
                     for( x in rank ) print x "|" 0.99*rank[x] "|" time[x]
                 } else for( x in rank ) print x "|" rank[x] "|" time[x]
             }
         ' 2>/dev/null >| "$tempfile"
         # do our best to avoid clobbering the datafile in a race condition.
         if [ $? -ne 0 -a -f "$datafile" ]; then
             env rm -f "$tempfile"
         else
             [ "$_Z_OWNER" ] && chown $_Z_OWNER:"$(id -ng $_Z_OWNER)" "$tempfile"
             env mv -f "$tempfile" "$datafile" || env rm -f "$tempfile"
         fi

     # tab completion
     elif [ "$1" = "--complete" -a -s "$datafile" ]; then
         _z_dirs | awk -v q="$2" -F"|" '
             BEGIN {
                 q = substr(q, 3)
                 if( q == tolower(q) ) imatch = 1
                 gsub(/ /, ".*", q)
             }
             {
                 if( imatch ) {
                     if( tolower($1) ~ q ) print $1
                 } else if( $1 ~ q ) print $1
             }
         ' 2>/dev/null

     else
         # list/go
         local echo fnd last list opt typ
         while [ "$1" ]; do case "$1" in
             --) while [ "$1" ]; do shift; fnd="$fnd${fnd:+ }$1";done;;
             -*) opt=${1:1}; while [ "$opt" ]; do case ${opt:0:1} in
                     c) fnd="^$PWD $fnd";;
                     e) echo=1;;
                     h) echo "${_Z_CMD:-z} [-cehlrtx] args" >&2; return;;
                     l) list=1;;
                     r) typ="rank";;
                     t) typ="recent";;
                     x) sed -i -e "\:^${PWD}|.*:d" "$datafile";;
                 esac; opt=${opt:1}; done;;
              *) fnd="$fnd${fnd:+ }$1";;
         esac; last=$1; [ "$#" -gt 0 ] && shift; done
         [ "$fnd" -a "$fnd" != "^$PWD " ] || list=1

         # if we hit enter on a completion just go there
         case "$last" in
             # completions will always start with /
             /*) [ -z "$list" -a -d "$last" ] && builtin cd "$last" && return;;
         esac

         # no file yet
         [ -f "$datafile" ] || return

         local cd
         cd="$( < <( _z_dirs ) awk -v t="$(date +%s)" -v list="$list" -v typ="$typ" -v q="$fnd" -F"|" '
             function frecent(rank, time) {
               # relate frequency and time
               dx = t - time
               return int(10000 * rank * (3.75/((0.0001 * dx + 1) + 0.25)))
             }
             function output(matches, best_match, common) {
                 # list or return the desired directory
                 if( list ) {
                     if( common ) {
                         printf "%-10s %s\n", "common:", common > "/dev/stderr"
                     }
                     cmd = "sort -n >&2"
                     for( x in matches ) {
                         if( matches[x] ) {
                             printf "%-10s %s\n", matches[x], x | cmd
                         }
                     }
                 } else {
                     if( common ) best_match = common
                     print best_match
                 }
             }
             function common(matches) {
                 # find the common root of a list of matches, if it exists
                 for( x in matches ) {
                     if( matches[x] && (!short || length(x) < length(short)) ) {
                         short = x
                     }
                 }
                 if( short == "/" ) return
                 for( x in matches ) if( matches[x] && index(x, short) != 1 ) {
                     return
                 }
                 return short
             }
             BEGIN {
                 gsub(" ", ".*", q)
                 hi_rank = ihi_rank = -9999999999
             }
             {
                 if( typ == "rank" ) {
                     rank = $2
                 } else if( typ == "recent" ) {
                     rank = $3 - t
                 } else rank = frecent($2, $3)
                 if( $1 ~ q ) {
                     matches[$1] = rank
                 } else if( tolower($1) ~ tolower(q) ) imatches[$1] = rank
                 if( matches[$1] && matches[$1] > hi_rank ) {
                     best_match = $1
                     hi_rank = matches[$1]
                 } else if( imatches[$1] && imatches[$1] > ihi_rank ) {
                     ibest_match = $1
                     ihi_rank = imatches[$1]
                 }
             }
             END {
                 # prefer case sensitive
                 if( best_match ) {
                     output(matches, best_match, common(matches))
                     exit
                 } else if( ibest_match ) {
                     output(imatches, ibest_match, common(imatches))
                     exit
                 }
                 exit(1)
             }
         ')"

         if [ "$?" -eq 0 ]; then
           if [ "$cd" ]; then
             if [ "$echo" ]; then echo "$cd"; else builtin cd "$cd"; fi
           fi
         else
           return $?
         fi
     fi
 }

 alias ${_Z_CMD:-z}='_z 2>&1'

 [ "$_Z_NO_RESOLVE_SYMLINKS" ] || _Z_RESOLVE_SYMLINKS="-P"

 if type compctl >/dev/null 2>&1; then
     # zsh
     [ "$_Z_NO_PROMPT_COMMAND" ] || {
         # populate directory list, avoid clobbering any other precmds.
         if [ "$_Z_NO_RESOLVE_SYMLINKS" ]; then
             _z_precmd() {
                 (_z --add "${PWD:a}" &)
                 : $RANDOM
             }
         else
             _z_precmd() {
                 (_z --add "${PWD:A}" &)
                 : $RANDOM
             }
         fi
         [[ -n "${precmd_functions[(r)_z_precmd]}" ]] || {
             precmd_functions[$(($#precmd_functions+1))]=_z_precmd
         }
     }
     _z_zsh_tab_completion() {
         # tab completion
         local compl
         read -l compl
         reply=(${(f)"$(_z --complete "$compl")"})
     }
     compctl -U -K _z_zsh_tab_completion _z
 elif type complete >/dev/null 2>&1; then
     # bash
     # tab completion
     complete -o filenames -C '_z --complete "$COMP_LINE"' ${_Z_CMD:-z}
     [ "$_Z_NO_PROMPT_COMMAND" ] || {
         # populate directory list. avoid clobbering other PROMPT_COMMANDs.
         grep "_z --add" <<< "$PROMPT_COMMAND" >/dev/null || {
             PROMPT_COMMAND="$PROMPT_COMMAND"$'\n''(_z --add "$(command pwd '$_Z_RESOLVE_SYMLINKS' 2>/dev/null)" 2>/dev/null &);'
         }
     }
 fi
 #+end_src

** liquidprompt
 Damit sieht das Terminal besser aus (Path abschneiden und aktuellen Git-Branch
 anzeigen)

 https://github.com/nojhan/liquidprompt

** dtrx

 Versucht, gg. Datei zu extrahieren, egal welches Format

* Memory-Management
mit =free -m= Memory-Usage anschauen. "available" ist der wichtige und richtige
Wert. Ist RAM zu voll, wird teilweise geswappt. Swapping macht PC langsam und
warm (so meine Erfahrung). Deshalb kann man Swapping-Verhalten anpassen:
** Swap
*** Swap leeren
 Wenn was im Swap Speicher ist, obwohl man genug RAM hätte, kann man mit
 folgenden Befehlen den Swap kurzzeitig aus- und anschalten. Die Swap-Inhalte
 werden vor dem Ausschalten in den RAM gepumpt.

 #+begin_src bash
 sudo swapoff -a
 sudo swapon -a
 #+end_src

*** Swappiness
 Man kann einstellen, wie zügig der Swap-Speicher benutzt werden soll.

 #+begin_src bash
 # Zeige aktuelle Swappiness (default Ubuntu ist 60)
 cat /proc/sys/vm/swappiness
 # Setze Swappiness
 sudo sysctl vm.swappiness=10
 #+end_src

 Geringerer Wert = weniger schnell zum Swap-Speicher greifen. Nach Neustart
 wieder auf default. Um es permanent zu schalten, muss der Datei
 =/etc/sysctl.conf= folgendes hinzugefügt werden: =vm.swappiness=10=

 Quelle(n)
 https://www.howtoforge.com/tutorial/linux-swappiness/
 https://www.howtogeek.com/449691/what-is-swapiness-on-linux-and-how-to-change-it/

*** Prozesse, die Swap benutzen, anzeigen

Um zu sehen, welche Prozesse wie viel Swap benutzen, folgenden Code ausführen:

#+begin_src bash
for file in /proc/*/status ; do awk '/VmSwap|Name/{printf $2 " " $3}END{ print ""}' $file; done | sort -k 2 -n -r | less
#+end_src

* Boot-Screen ändern
Von hier https://www.gnome-look.org/p/1339324/ Bootscreen auswählen.

** Schöne Screens
- ubuntu touch
https://www.gnome-look.org/p/1339324/
- ubuntu vision
https://www.gnome-look.org/p/1359645/
- lilith-glamour
https://www.gnome-look.org/p/1351775/

** Installation

Am Beispiel ubuntu-vision. mit =plymouth-x11= kann man eine Vorschau sehen.

#+begin_src bash
sudo mkdir /usr/share/plymouth/themes/ubuntu-vision
clear
sudo rsync -aq --exclude=install-ubuntu-vision * /usr/share/plymouth/themes/ubuntu-vision/
clear
sudo update-alternatives --install /usr/share/plymouth/themes/default.plymouth default.plymouth /usr/share/plymouth/themes/ubuntu-vision/ubuntu-vision.plymouth 100
sudo update-alternatives --config default.plymouth  #here, choose the number of the theme you want to use then hit enter
sudo update-initramfs -u
echo
echo Installing plymouth-x11...   Redundant if already installed.
sudo apt-get install plymouth-x11
echo
echo Running 10-second test...
sudo plymouthd ; sudo plymouth --show-splash ; for ((I=0; I<10; I++)); do sleep 1 ; sudo plymouth --update=test$I ; done ; sudo plymouth --quit
exit
#+end_src

ausführen

* Login-Screen ändern
https://askubuntu.com/questions/797845/how-do-i-change-the-login-screen-in-ubuntu-16-04#:~:text=In%20short%3A%20Open%20sudo%20gedit,restart%20to%20try%20it%20out.
* Desktop gnome Theme ändern
** Schöne Themes
- https://www.gnome-look.org/p/1334194/
- https://www.gnome-look.org/p/1357889/
- oder allgmein auf https://www.gnome-look.org/ oder https://pling.com schauen

** Installation
- Themes werden in den Ordner =/home/kaan/.themes= entpackt
- Icon-Packages in =/home/kaan/.icons=

Dann kann man mit dem Gnome Tweaks Tool unter "Appearance" die gewünschten
Themes und Icon-Packages auswählen

* Nur bestimmten Monitor sharen
https://github.com/Ashark/hliss
* Bildschirm aufnehmen, Screen Capture, Video
**  Kazam
Kann sogar nur Teile des Bildschirms aufnehmen, easy usage
#+begin_src bash
sudo apt install kazam
#+end_src
* Login Fail, Unlock GUI from console
Falls man sich mal grafisch nicht mehr einloggen kann, folgender Befehl in einer
Konsole unlockt Sessions:

#+begin_src bash
sudo loginctl unlock-sessions
#+end_src

(War bei mir der Fall nach nem Update. Kam beim GUI-Login "Authentication
Error". Anscheinend, weil fs.inotify.max_user_watches auf einen sehr niedrigen
Wert gesetzt war. Schreibe in =/etc/sysctl.conf= rein:

#+begin_src bash
fs.inotify.max_user_watches=524288
#+end_src

und es sollte wieder funktionieren.)
* CAPS LOCK als ESCAPE
Tweaks -> Keyboard & Mouse -> Additional Layout Options -> Caps Lock behavior ->
Make Caps Lock an additional Esc

Es kann sein, dass es mal für externe Tastatur nicht funktioniert. Dann
deaktivieren, Tweaks schließen, wieder starten und aktivieren.
* gnome-shell-extensions
** gtile

Damit kann man Fenster am Bildschirm anordnen, z. B. hälftig im Monitor, oder
ein Drittel oder oder oder.

Konfiguriere über Presets, z. B. :

=6x1 3:1 4:1, 2:1 5:1=

bedeutet

- =6x1=: horizontal Sechstel (6), vertikal kein Teilen (1).

- =3:1 4:1= nimm Platz vom 3. Sechstel bis 4. ein
- =2:1 5:1= nimm Platz vom 2. Sechstel bis 5. ein

** Microphone Usage Indicator

Gnome Shell Extension "Nothing to say"

** Alt Tab lift first window
** Alt Tab Workspace
** system-monitor
** User Themes
* Gnu Pass
Passwort-Manager im Terminal

** Installation

#+begin_src bash
sudo apt install pass
#+end_src

** Init
mit GPG key

GPG-Key anzeigen via

#+begin_src bash
gpg --list-keys
#+end_src

Das unter Pub nehmen (== GPG-KEY)
#+begin_src bash
pass init GPG KEY
#+end_src

** Passwort erstellen

#+begin_src bash
pass insert NAME-VOM-PASSWORT
#+end_src

** Passwort holen

#+begin_src bash
pass show NAME-VOM-PASSWORT
#+end_src

* Apple Spotlight / Quicksilver / Alfred / Albert Alternative

Es gibt auch noch
- Albert
- Cerebro

** Cerebro

Cerebro hat bei mir nicht funktioniert.

Funktioniert jetzt. Man kann es manuell bauen und installieren via Github-Repo
https://github.com/cerebroapp/cerebro und dann

#+begin_src bash
git clone https://github.com/cerebroapp/cerebro.git
cd cerebro
sed -i 's/"0.3.3"/"0.4.0"/g' app/package.json
sed -i 's/"0.3.3"/"0.4.0"/g' package.json
(yarn; cd app; yarn); yarn build
./release/Cerebro-0.4.0.AppImage
#+end_src

** Albert

 Albert war manchmal nervig, weiß nicht
mehr warum.

** Synapse

Habe nun Synapse, mal sehen, funktioniert gut, auch File-Suche. Sieht UI-mäßig
hässlich aus.

* Top aber für Network Usage

Installiere "nethogs"

#+begin_src bash
sudo apt install nethogs
#+end_src

* Remote Desktop

Remmina, ist schon vorinstalliert.

* Um eine Anwendung im Ubuntu Activities anzeigen zu lassen

Z. B. durch nix installierte Pakete tauchen nicht auf, wenn man dann
Windows-Taste drückt. Abhilfe:

Mache Symlink zu <program>.desktop-Datei in Pfad =/usr/share/applications/=

Beispiel:

#+begin_src bash
ln -sf emacs.desktop /usr/share/application/emacs.desktop
#+end_src

=s= für symbolic und =f= dass man Pfad angeben kann.

* Microsoft Office installieren

- Quelle:
  https://www.makeuseof.com/tag/install-use-microsoft-office-linux/
- Image MS Office 2016 herunterladen
  https://officecdn.microsoft.com/db/492350F6-3A01-4F97-B9C0-C7C6DDF67D60/media/de-DE/ProfessionalRetail.img
- Programm PlayOnLinux installieren
  #+begin_src bash
  sudo apt install winbind
  sudo apt install playonlinux
  #+end_src
- via PlayOnLinux MS Office 2016 (method B) installieren

* USB erkennt externe Tastatur/Maus nicht

Liegt häufig an Suspend. Benutze

#+begin_src bash
dmesg | grep -i USB
#+end_src

oder =lsusb=, um zu gucken, ob das Gerät angezeigt wird. Wenn nicht, versuche
via =usbreset= das USB-Gerät zurückzusetzen. Mit =usbreset= Geräte anzeigen
lassen und dann eins davon neustarten, z. B.:

#+begin_src bash
usbreset 001/003
#+end_src

* ProxyCommand Jumphosts

Um nicht zwei SSH-Befehle hintereinander ausführen zu müssen, kann man in der
Datei =~/.ssh/config= den Befehl "ProxyCommand" benutzen:

Z. B. wollen wir auf Joshua, der auf Leibniz liegt. Normalerweise müsste man
machen:

#+begin_src bash
$> ssh root@leibniz.active-group.de
leibniz$> ssh root@joshua-x
#+end_src

Schreibt man in die obige Datei aber Folgendes rein:

#+begin_src bash
Host joshua-x
  ProxyCommand ssh root@leibniz.active-group.de -W %h:%p
  User root
#+end_src

Muss man ab sofort nur noch =ssh root@joshua-x= schreiben.

* Public SSH-Key auf Server hinterlassen

Geht mit folgendem Befehl:

#+begin_src bash
ssh-copy-id -i ~/.ssh/id_rsa.pub root@bbb.active-group.de
#+end_src

* Backups (auch zu Remote-Server)

Gerade benutze ich BackInTime

Alternative Deja Dup? Anschauen nächstes Mal
